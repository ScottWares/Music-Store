* Tests *

- TDD tests are available under com.nextgate.assesment.assesmentapplicationtests

* Database *

- 000webhost did not support JDBC connections. Had to find another free host that did.
- VARCHAR used since it is possible for singer, album and company names to contain numbers
- VARCHAR limits not imposed. Length of 50 for most attributes other than "Sex" which is restricted to 6
- DOB attribute set to YEAR type to follow YYYY format
- Table structure as follows:
	- Singers: Name (VARCHAR, PK), DOB (DATE, PK), SEX (VARCHAR 6), COMPANY (VARCHAR)
	- Album: Singer (VARCHAR, PK), Album( VARCHAR, PK) Year (YEAR), Company (VARCHAR)
	- User: User (VARCHAR 15, PK), Pass (VARCHAR 15)
- Assuming that a composite PK using attributes "Name" and "DOB" for the Singers table is okay. It does allow the subtle possibility for the breach of entity
integrity since a singer *could* have the same name and date of birth as another. However, for simplicity's sake in this instance I think it is okay.

* Data Loader *

- Kept this separate from the REST api i.e. no endpoint
- Instead set this to run on application load, after Spring Boot has setup all beans/dependencies
- The composite PKs maintain entity integrity and ensure no duplicates are inserted even when the loader is executer on startup and data is already in tables
- Enums are stored by JPA using ordinal() by default, so I had to include the @Enumerated annotation to the "Sex" property of Singer.java
- Missing break statement was causing singers to be stored also as users

* DateTime types *

- ENUM for Sex
- Date constructors deprecated (in some cases). DateTime objects in Java are rather problematic
- Played around with Calendar but it seemed excessive considering I'm only concerned with a "yyyyDDmm" date string
- LocalDate is great, except it must have month, day and year information supplied. This was unsuitable for the Album class
- Initially used java.time.Year as datatype for album year but this was met with type exceptions for insert queries.
- Moved from java.time.Year to int in the case of album year

* Hibernate & SQL Queries*

- Encountered a strange issue where having an initial capitalised table name was causing "table not found" errors in Hibernate. 
It seems it was being parsed as lower case during query execution, even if the annotation attribute was capitalised. Couldn't find a solution in good time so 
renamed my tables to lowercase.

* React *

- Pretty much had to learn this from scratch
- Interesting issue using the <select> element to select the correct API call for searching. setState() is used but this is asynchronous and often
fell behind the selected targets by the user. Adding a callback to console.log() fixed the issue 
- https://stackoverflow.com/questions/53102478/react-input-onchange-to-update-state-step-behind
- Not specifically a React problem, but since the search API requires a String and this is sent in text/plain, we have to remove the double quotes
before performing the query. Opted to do this server side with replaceAll()
- state.queryTarget represents a search for either a singer or an album. 
- state.resultsQueryTarget represents the target of the last API request. 
- differentiating between the two prevents a bug where changing state.queryTarget causes changing pages of the results to display missing info
